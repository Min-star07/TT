#include <iostream>
#include <vector>
#include <TFile.h>
#include <TH1F.h>
#include <TString.h>

class HistogramSaver {
private:
    TString fileName;
    TFile *rootFile;

public:
    HistogramSaver(const TString& fileName) : fileName(fileName) {
        // Open the ROOT file in write mode
        rootFile = new TFile(fileName, "RECREATE");
    }

    ~HistogramSaver() {
        // Close the ROOT file
        if (rootFile) {
            rootFile->Close();
            delete rootFile;
        }
    }

    void saveHistograms(const std::vector<TH1F*>& histograms) {
        // Write all histograms to the ROOT file
        if (rootFile) {
            for (size_t i = 0; i < histograms.size(); ++i) {
                if (histograms[i]) {
                    histograms[i]->Write(histograms[i]->GetName(), TObject::kOverwrite);
                    std::cout << "Histogram '" << histograms[i]->GetName() << "' saved to ROOT file." << std::endl;
                } else {
                    std::cerr << "Error: Null histogram encountered." << std::endl;
                }
            }
        } else {
            std::cerr << "Error: ROOT file is not open." << std::endl;
        }
    }
};

int test() {
    TString fileName = "output.root";
    HistogramSaver histogramSaver(fileName);

    // Create and fill histograms
    std::vector<TH1F*> histograms;
    for (int i = 0; i < 5; ++i) {
        TString histName = TString::Format("histogram_%d", i);
        TH1F *histogram = new TH1F(histName, TString::Format("Histogram %d", i), 100, 0, 10);
        for (int j = 0; j < 10000; ++j) {
            histogram->Fill(gRandom->Gaus(5, 1)); // Fill with random Gaussian values
        }
        histograms.push_back(histogram);
    }

    // Save the histograms
    histogramSaver.saveHistograms(histograms);

    // Delete histograms to avoid memory leaks
    for (size_t i = 0; i < histograms.size(); ++i) {
        delete histograms[i];
    }

    return 0;
}